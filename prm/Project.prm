/* This is a linker parameter file for the MC9S12XS128 */

/*
This file is setup to use the HCS12X core only.
If you plan to also use the XGATE in your project, best create a new project with the
'New Project Wizard' (File|New... menu in the CodeWarrior IDE) and choose the appropriate
project parameters.
*/
//INIT 
NAMES
    /* CodeWarrior will pass all the needed files to the linker by command line. But here you may add your additional files */
END

      /* 
      Area 0x3800-0x38FF is reserved for stack. Stack pointer is initialized in StartS12X.s file
      to initail value 0x3900.
      Area 0x3900-0x3CFF is used for standard purposes.      
      Area 0x3D00-0x3EFF is used for functions that must be executed from RAM memory. These functions
      are stored in flash memory in RAM_CODE_SEG (see below) and are copied to RAM memory after startup. 
      Area 0x3F00-0x3FFF is used for interrupt vector table.
      */   
                      

SEGMENTS /* here all RAM/ROM areas of the device are listed. Used in PLACEMENT below. All addresses are 'logical' */
/* Register space  */
/*    IO_SEG        = PAGED                            0x0000 TO   0x07FF; intentionally not defined */

/* non-paged RAM  8K RAM 0x2000-0x4000*/
      RAM           = READ_WRITE  DATA_NEAR            0x2002 TO   0x39FF;    //
      RAM_CODE_SEG  = READ_ONLY   0xFA00 TO   0xFEFF   RELOCATE_TO   0x3A00;    //768  3C 3D 3E 3F

/* non-banked FLASH 128K */
     // ROM_4000      = READ_ONLY   DATA_NEAR IBCC_NEAR  0x4000 TO   0x7FFF; 
      ROM_BOOT      = READ_ONLY   DATA_NEAR IBCC_NEAR  0xF000 TO   0xF9FF;       //0x7FF000
/*    VECTORS       = READ_ONLY                        0xFF00 TO   0xFFFF; intentionally not defined: used for VECTOR commands below */
    //OSVECTORS     = READ_ONLY                        0xFF10 TO   0xFFFF;  /* OSEK interrupt vectors (use your vector.o) */



/* paged EEPROM                                        0x0800 TO   0x0BFF; addressed through EPAGE */
      EEPROM_00     = READ_ONLY   DATA_FAR IBCC_FAR  0x000800 TO 0x000BFF;        
      EEPROM_01     = READ_ONLY   DATA_FAR IBCC_FAR  0x010800 TO 0x010BFF;       
      EEPROM_02     = READ_ONLY   DATA_FAR IBCC_FAR  0x020800 TO 0x020BFF; 
      EEPROM_03     = READ_ONLY   DATA_FAR IBCC_FAR  0x030800 TO 0x030BFF; 
      EEPROM_04     = READ_ONLY   DATA_FAR IBCC_FAR  0x040800 TO 0x040BFF; 
      EEPROM_05     = READ_ONLY   DATA_FAR IBCC_FAR  0x050800 TO 0x050BFF; 
      EEPROM_06     = READ_ONLY   DATA_FAR IBCC_FAR  0x060800 TO 0x060BFF; 
      EEPROM_07     = READ_ONLY   DATA_FAR IBCC_FAR  0x070800 TO 0x070BFF; 

/* paged RAM:                                          0x1000 TO   0x1FFF; addressed through RPAGE */
/*    RAM_FE        = READ_WRITE                     0xFE1000 TO 0xFE1FFF; intentionally not defined: equivalent to RAM: 0x2000..0x2FFF */
/*    RAM_FF        = READ_WRITE                     0xFF1000 TO 0xFF1FFF; intentionally not defined: equivalent to RAM: 0x3000..0x3FFF */

/* paged FLASH:                                        0x8000 TO   0xBFFF; addressed through PPAGE */
      PAGE_F8       = READ_ONLY   DATA_FAR IBCC_FAR  0xF88000 TO 0xF8BFFF;      //0x7E0000
      PAGE_F9       = READ_ONLY   DATA_FAR IBCC_FAR  0xF98000 TO 0xF9BFFF;      //0x7E4000
      PAGE_FA       = READ_ONLY   DATA_FAR IBCC_FAR  0xFA8000 TO 0xFABFFF;      //0x7E8000
      PAGE_FB       = READ_ONLY   DATA_FAR IBCC_FAR  0xFB8000 TO 0xFBBFFF;      //0x7EC000
      PAGE_FC       = READ_ONLY   DATA_FAR IBCC_FAR  0xFC8000 TO 0xFCBFFF;      //0x7F0000 
/*    PAGE_FD       = READ_ONLY                      0xFD8000 TO 0xFDBFFF;      //0x7F4000   //equivalent to ROM_4000 
      PAGE_FE       = READ_ONLY   DATA_FAR IBCC_FAR  0xFE8000 TO 0xFEBFFF;      //0x7F8000
/*    PAGE_FF       = READ_ONLY                      0xFF8000 TO 0xFFBFFF;      //0x7FC000: equivalent to ROM_C000 */
END

PLACEMENT /* here all predefined and user segments are placed into the SEGMENTS defined above. */
   //   _PRESTART,              /* Used in HIWARE format: jump to _Startup at the code start */
   //   STARTUP,                /* startup data structures */
    //  ROM_VAR,                /* constant variables */
      DEFAULT_ROM, NON_BANKED,             /* runtime routines which must not be banked */
      COPY                    /* copy down information: how to initialize variables */
                              /* in case you want to use ROM_4000 here as well, make sure
                                 that all files (incl. library files) are compiled with the
                                 option: -OnB=b */
                        INTO  ROM_BOOT/*, ROM_4000*/;

    //.stackstart,            /* eventually used for OSEK kernel awareness: Main-Stack Start */
      SSTACK,                 /* allocate stack first to avoid overwriting variables on overflow */
    //.stackend,              /* eventually used for OSEK kernel awareness: Main-Stack End */
      PAGED_RAM,              /* there is no need for paged data accesses on this derivative */

      DEFAULT_RAM             /* all variables, the default RAM location */
                        INTO  RAM;
      
      RAM_CODE        INTO  RAM_CODE_SEG;

     
    //.vectors          INTO  OSVECTORS; /* OSEK vector table */
END


ENTRIES /* keep the following unreferenced variables */
    /* OSEK: always allocate the vector table and all dependent objects */
  //_vectab OsBuildNumber _OsOrtiStackStart _OsOrtiStart
END

STACKSIZE 0x200   /* size of the stack (will be allocated in DEFAULT_RAM) */

/* use these definitions in plane of the vector table ('vectors') above */
VECTOR 0 _BootStart /* reset vector: this is the default entry point for a C/C++ application. */
//VECTOR 0 Entry  /* reset vector: this is the default entry point for an Assembly application. */
//INIT Entry      /* for assembly applications: that this is as well the initialization entry point */
VECTOR 1 _BootStart
VECTOR 2 _BootStart